/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Change history:

2.0.0 - tomw and mikes - Update to new API flow and real-time events without polling
1.1.1 - tomw - Added Actuator for compatibility.
1.1.0 - tomw - Added support for multiple openers.
1.0.0 - tomw - Initial release.

 */

metadata
{
    definition(name: "Aladdin Connect Garage Door", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "Battery"
        capability "GarageDoorControl"
        capability "SignalStrength"
    }
}

import groovy.transform.Field
@Field Map doorStates = 
    [
        0: "unknown",
        1: "open",
        2: "opening",
        3: "opening timeout",
        4: "closed",
        5: "closing",
        6: "closing timeout",
        7: "unknown"
    ]

def refreshFromMaster(door)
{
    // this 'door' came from a polled refresh
    
    if(!door)
    {
        return
    }
    
    updateDoor(door)
    
    // save off the device_id for open/close operations
    updateDataValue("device_id", door.device_id?.toString())
    
    sendEvent(name: "battery", value: door.battery_level)
    sendEvent(name: "rssi", value: door.ble_strength)
}

def handleEvent(event)
{
    // this 'event' came from a wss event response
    
    if(!event)
    {
        return
    }
    
    def door = [status: event.door_status, fault: event.fault]
    
    updateDoor(door)
}

def updateDoor(door)
{
    def stateVal = doorStates[door.status]
    
    if(door.fault)
    {
        // this is a special value related to a physical fault,
        //  so we override the value here to match the Genie app 
        stateVal = "UL Lockout"
    }
    
    sendEvent(name: "door", value: stateVal)
}    

def close()
{
    parent?.componentClose(this.device)
}

def open()
{
    parent?.componentOpen(this.device)
}

def requestRefresh()
{
    parent?.refreshFromChild()
}
