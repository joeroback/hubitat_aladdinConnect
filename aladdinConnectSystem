/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Change history:

1.2.0(dev) - tomw - Update to new API flow 
1.1.2 - tomw - Support both seconds and minutes for refreshInterval.
1.1.1 - tomw - Added Actuator for compatibility.
1.1.0 - tomw - Added support for multiple openers.
1.0.0 - tomw - Initial release.

 */

metadata
{
    definition(name: "Aladdin Connect System", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "Configuration"
        capability "Initialize"
        capability "Refresh"
        capability "SignalStrength"
        
        attribute "commStatus", "string"
        
        command "TEMP_closeDoor", ["device_id", "door_number"]
        command "TEMP_openDoor", ["device_id", "door_number"]
        
    }
}

preferences
{
    section
    {
        input name: "username", type: "text", title: "Username (email)", required: true
        input name: "password", type: "password", title: "Password", required: true
        input name: "refreshInterval", type: "number", title: "Refresh interval", defaultValue: 5
        input name: "refreshIntervalS", type: "bool", title: "Use seconds for refresh interval? (false for minutes)", defaultValue: false 
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
    section
    {
        input name: "useNew", type: "bool", title: "Use new API server?", required: true, defaultValue: false      
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def TEMP_closeDoor(deviceID, doorNum)
{
    logDebug("CLOSING")
    operateDoor("close", deviceID, doorNum)
}

def TEMP_openDoor(deviceID, doorNum)
{
    logDebug("OPENING")
    operateDoor("open", deviceID, doorNum)
}

def operateDoor(op, deviceID, doorNum)
{
    payload = [command_key: (op == "open") ? "OpenDoor" : "CloseDoor"]

    httpAccess("POST", genParamsApi("devices/${deviceID}/door/${doorNum}/command", "json", payload))
}

def login()
{
    def body = 
    [
        grant_type: "password",
        client_id: "1000",
        brand: "ALADDIN",
        username: java.net.URLEncoder.encode(username, "UTF-8"),
        password: password.getBytes("UTF-8").encodeBase64().toString(),        
        platform: "platform",
        app_version: "5.25",
        build_number: "2038",
        os_version: "12.0.0"
    ]
    
    def resp = httpAccess("POST", (genParamsApi("oauth/token", "text", body)))
    
    if(resp)
    {
        setToken(resp.data.access_token)
    }
}

def get_devices()
{
    def resp = httpAccess("GET", genParamsApi("configuration", "text"))
    
    //resp = [data: [devices:[[is_locked:false, family:2, id:77751, legacy_id:F0AD4E0F20B3, ssid:RoamAtHome, doors:[[desired_door_status_outcome:success, updated_at:"", desired_door_status:Open, id:87651, user_id:29314, vehicle_color:OTHER, door_index:1, icon:1, link_status:3, door_updated_at:"2022-02-07T02:07:27Z", created_at:"2020-09-16T08:06:49Z", desired_status:99, status:4, fault:0, ble_strength:0, is_enabled:true, battery_level:0, device_id:77751, name:"Garage door", vehicle_type:OTHER]]]]]]    

    if(resp)
    {
        def devices = []
        for(device in resp.data.devices)
        {
            logDebug device
            def doors = []
            for(door in device.doors)
            {
                doors +=
                    [
                        device_id: device.id,
                        door_number: door.door_index,
                        name: door.name,
                        status: door.status,
                        link_status: door.link_status
                    ]
            }
            devices +=
                [
                    device_id: device.id,
                    doors: doors
                ]
        }
        
        setDevices(devices)
    }    
}

def update_doors()
{
    def devices = getDevices()
    
    def child
    
    if(devices)
    {
        devices.each
        {
            it.doors.each
            {
                child = manageDoorDevice("${it.device_id}:${it.door_number}")
                if(child)
                {
                    logDebug("logging child ${it.device_id}:${it.door_number}")
                }
            }            
        }
    }
}

def updated()
{
    //configure()
}

def configure()
{
    state.clear()
    sendEvent(name: "commStatus", value: "unknown") 
    sendEvent(name: "rssi", value: "unknown")
    
    initialize()
}

def refreshTokens()
{
    try
    {
        // retrieve and store user token
        setToken(httpGetExec(genParamsPre(), true))
        
        // retrieve and store user ID
        setUserId(httpGetExec(genParamsToken("users/_this"), true)?.id)
        
        // retrieve and store portal ID
        setPortalId(httpGetExec(genParamsToken("users/${getUserId()}/portals"), true)[0].PortalID)
        
        // retrieve and store devices and portal key
        def portalDetails = httpGetExec(genParamsToken("portals/${getPortalId()}"), true)
        setDevices(portalDetails.devices)
        setPortalKey(portalDetails.info.key)
        
        sendEvent(name: "commStatus", value: "good")
    }
    catch (Exception e)
    {
        logDebug("refreshTokens() failed")
        sendEvent(name: "commStatus", value: "error")
        throw(e)
    }
}

def refreshDoorInfo()
{
    try
    {
        if(useNew)
        {
            get_devices()
            update_doors()
            return
        }
        
        // query door info for all devices
        def postParams = genParamsPost()
        for(j = 0; j < getDevices().size(); j++)
        {
            postParams['body'] = genDoorInfoReq(j)
            def doorInfo = httpPostExec(postParams, true)
            
            if(doorInfo)
            {
                sendEvent(name: "commStatus", value: "good")
                
                sendEvent(name: "rssi", value: (doorInfo[9].result.isEmpty() ? "unknown" : doorInfo[9].result[0][1].toInteger()))
                
                def child
                def doorDevName
                for(i = 1; i < 4; i++)
                {
                    if(!doorInfo[3*i-2].result.isEmpty())
                    {
                        doorDevName = (j == 0 ? "${i}" : "${j}${i}") 
                        logDebug("managing door: ${doorDevName}")
                        child = manageDoorDevice(doorDevName.toString())
                        def doorState = [:]
                        if(child)
                        {
                            doorState =
                                [
                                    doorStatus: (doorInfo[3*i-3].result.isEmpty() ? "unknown" : doorInfo[3*i-3].result[0][1]),
                                    doorBattery: (doorInfo[3*(i-1)+10].result.isEmpty() ? "unknown" : doorInfo[3*(i-1)+10].result[0][1]),
                                    doorBLE: (doorInfo[3*(i-1)+11].result.isEmpty() ? "unknown" : doorInfo[3*(i-1)+11].result[0][1]),
                                    doorTemp: (doorInfo[3*(i-1)+12].result.isEmpty() ? "unknown" : doorInfo[3*(i-1)+12].result[0][1]),
                                ]
                            // update child device
                            logDebug("updating door: ${doorDevName} on child: ${child} with state: ${doorState}")
                            child.refreshFromMaster(doorDevName.toString(), doorState)
                        }
                    }
                }
            }
        }
    }
    catch (Exception e)
    {
        logDebug("refreshDoorInfo() failed")
        sendEvent(name: "commStatus", value: "error")
        throw(e)
    }
}

def initialize()
{
    sendEvent(name: "commStatus", value: "unknown") 
    refresh()
}

def uninstalled()
{
}

def refreshPeriod()
{
    def basePeriod = refreshInterval.toFloat().toInteger()
    
    return refreshIntervalS ? basePeriod : basePeriod * 60
}

def refresh()
{
    unschedule()
    
    try
    {
        useNew ? login() : refreshTokens()        
        refreshDoorInfo()
    }
    catch (Exception e)
    {
        logDebug("refresh() failed")
    }
    
    // schedule next refresh
    runIn(refreshPeriod(), refresh)
}

def refreshFromChild()
{
    unschedule()
    refreshDoorInfo()
    
    // schedule next refresh
    runIn(refreshPeriod(), refresh)
}

def checkCommStatus()
{
    switch(device.currentValue("commStatus"))
    {
        case "good":
            logDebug("checkCommStatus() success")
            return true
        
        case "error":
        case "unknown":
        default:
            logDebug("checkCommStatus() failed")
            return false
    }
}

def setToken(token)
{
    state.token = token
}

def getToken()
{
    return state.token
}

def setUserId(id)
{
    state.userId = id
}

def getUserId()
{
    return state.userId
}

def setPortalId(id)
{
    state.portalId = id
}

def getPortalId()
{
    return state.portalId
}

def setDevices(devices)
{
    state.devices = devices
}

def getDevices()
{
    return state.devices
}

def setPortalKey(key)
{
    state.portalKey = key
}

def getPortalKey()
{
    return state.portalKey
}

def getUsername()
{
    return username
}

def getBaseURI()
{
    return "https://genie.exosite.com/api/portals/v1/"
}

def getBasePostURI()
{
    return "https://genie.m2.exosite.com/onep:v1/rpc/process"
}

def manageDoorDevice(name)
{
    // use existing child, or create it
    return getChildDevice(childDoorName(name)) ?: 
        addChildDevice("Aladdin Connect Garage Door", childDoorName(name), [label:"${childDoorName(name)}", isComponent:true, name:"${childDoorName(name)}"])
}

def childDoorName(name)
{
    return "${device.getName()}-${name}"
}

String toQueryString(Map m)
{
    return m.collect{ k, v -> "${k}=${v.toString()}" }.sort().join("&")
}

def getAWSURI()
{
    return "https://pxdqkls7aj.execute-api.us-east-1.amazonaws.com/Android"
}

def genParamsApi(endpoint, type, body = null)
{
    def params =
        [
            uri: getAWSURI() + "/" + endpoint,
            headers:
            [
                AppVersion: '5.25',
                BundleName: 'com.geniecompany.AladdinConnect',
                'User-Agent': 'okhttp/3.12.1',
                'BuildVersion': '131',
                'X-Api-Key': 'fkowarQ0dX9Gj1cbB9Xkx1yXZkd6bzVn5x24sECW',
                'Content-Type': (type == "text") ? 'application/x-www-form-urlencoded' : 'application/json',
                Authorization: "Bearer ${getToken()}"
            ],
            
            requestContentType: (type == "text") ? 'application/x-www-form-urlencoded' : 'application/json',
        ]
    
    if(body)
    {
        switch(type)
        {
            case "text":
                params.body = toQueryString(body)
                break
            
            case "json":
                params.body = new groovy.json.JsonOutput().toJson(body)
                break
        }
    }
 
    return params
}

def genParamsPre()
{
    def params =
        [
            uri: getBaseURI() + "users/_this/token",
            headers:
            [
                'AppVersion': '2.10.1',
                'BundleName': 'com.geniecompany.AladdinConnect',
                'User-Agent': 'Aladdin Connect Android v2.10.1',
                'BuildVersion': '131',
                'Authorization': "Basic " + ("${username}:${password}").bytes.encodeBase64().toString()
            ]
        ]
 
    return params
}

def genParamsToken(suffix)
{
    def params =
        [
            uri: getBaseURI() + suffix,
            headers:
            [
                'AppVersion': '2.10.1',
                'BundleName': 'com.geniecompany.AladdinConnect',
                'User-Agent': 'Aladdin Connect Android v2.10.1',
                'BuildVersion': '131',
                'Authorization': "Token: " + getToken()
            ]
        ]
 
    return params
}

def genParamsPost()
{
    def params =
        [
            uri: getBasePostURI(),
            headers:
            [
                'AppVersion': '2.10.1',
                'BundleName': 'com.geniecompany.AladdinConnect',
                'User-Agent': 'Aladdin Connect Android v2.10.1',
                'BuildVersion': '131',
                'Authorization': "Token: " + getToken(),
            ],
            contentType: 'application/json',
            requestContentType: 'application/json'
        ]
 
    return params
}

def genDoorInfoReq()
{
    genDoorInfoReq(0)
}

def genDoorInfoReq(doorNum)
{
    // NOTE: do not change the order of these requests
    //   add more at the end if needed
    def req = """
    {
    "auth": {
        "cik": "${getPortalKey()}",
        "client_id": "${getDevices()[doorNum]}"
    },
    "calls": [
        {
            "arguments": [
                {
                    "alias": "dps1.door_status"
                },
                {}
            ],
            "id": 1,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.name"
                },
                {}
            ],
            "id": 2,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.link_status"
                },
                {}
            ],
            "id": 3,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.door_status"
                },
                {}
            ],
            "id": 4,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.name"
                },
                {}
            ],
            "id": 5,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.link_status"
                },
                {}
            ],
            "id": 6,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.door_status"
                },
                {}
            ],
            "id": 7,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.name"
                },
                {}
            ],
            "id": 8,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.link_status"
                },
                {}
            ],
            "id": 9,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dcm.wifi_rssi"
                },
                {}
            ],
            "id": 10,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.battery_level"
                },
                {}
            ],
            "id": 11,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.ble_strength"
                },
                {}
            ],
            "id": 12,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.temperature"
                },
                {}
            ],
            "id": 13,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.battery_level"
                },
                {}
            ],
            "id": 14,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.ble_strength"
                },
                {}
            ],
            "id": 15,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.temperature"
                },
                {}
            ],
            "id": 16,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.battery_level"
                },
                {}
            ],
            "id": 17,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.ble_strength"
                },
                {}
            ],
            "id": 18,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.temperature"
                },
                {}
            ],
            "id": 19,
            "procedure": "read"
        }
    ]
    }
    """
    
    return req    
}

def httpGetExec(params, throwToCaller = false)
{
    logDebug("httpGetExec(${params})")
    
    try
    {
        def result
        httpGet(params)
        { resp ->
            if (resp.data)
            {
                logDebug("resp.data = ${resp.data}")
                result = resp.data
            }
        }
        return result
    }
    catch (Exception e)
    {
        logDebug("httpGetExec() failed: ${e.message}")
        if(throwToCaller)
        {
            throw(e)
        }
    }

}

def httpPostExec(params, throwToCaller = false)
{
    logDebug("httpPostExec(${params})")
    
    try
    {
        def result
        httpPost(params)
        { resp ->
            if (resp.data)
            {
                logDebug("resp.data = ${resp.data}")
                result = resp.data
            }
        }
        return result
    }
    catch (Exception e)
    {
        logDebug("httpPostExec() failed: ${e.message}")
        if(throwToCaller)
        {
            throw(e)
        }
    }
}

def httpAccess(op, params)
{    
    def result = null
    
    logDebug("httpAccess(${op}, ${params})")
    
    def httpClosure = 
    { resp ->
        result = resp
        logDebug("result.data = ${result.data}")
    }    
	
    try
    {
        switch(op)
        {
            case "POST":
                httpPost(params, httpClosure)
                break
            case "GET":
                httpGet(params, httpClosure)
                break
        }
    }
    catch(Exception e)
    {
        log.error "httpAccess(${op}, ${params}) error: ${e.message}"
    }
    
    return result
}
