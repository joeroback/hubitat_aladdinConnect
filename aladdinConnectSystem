/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 */

metadata
{
    definition(name: "Aladdin Connect System", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Configuration"
        capability "Initialize"
        capability "Refresh"
        capability "SignalStrength"
        
        attribute "commStatus", "string"
    }
}

preferences
{
    section
    {
        input "username", "text", title: "Username (email)", required: true
        input "password", "password", title: "Password", required: true
        input "refreshInterval", "number", title: "Refresh interval (minutes)", defaultValue: 5
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def updated()
{
    configure()
}

def configure()
{
    state.clear()
    sendEvent(name: "commStatus", value: "unknown") 
    sendEvent(name: "rssi", value: "unknown")
    
    initialize()
}

def refreshTokens()
{
    try
    {
        // retrieve and store user token
        setToken(httpGetExec(genParamsPre(), true))
        
        // retrieve and store user ID
        setUserId(httpGetExec(genParamsToken("users/_this"), true)?.id)
        
        // retrieve and store portal ID
        setPortalId(httpGetExec(genParamsToken("users/${getUserId()}/portals"), true)[0].PortalID)
        
        // retrieve and store devices and portal key
        def portalDetails = httpGetExec(genParamsToken("portals/${getPortalId()}"), true)
        setDevices(portalDetails.devices)
        setPortalKey(portalDetails.info.key)
        
        sendEvent(name: "commStatus", value: "good")
    }
    catch (Exception e)
    {
        logDebug("refreshTokens() failed")
        sendEvent(name: "commStatus", value: "error")
        throw(e)
    }
}

def refreshDoorInfo()
{
    try
    {
        // query door info for all devices
        def postParams = genParamsPost()
        postParams['body'] = genDoorInfoReq()
        def doorInfo = httpPostExec(postParams, true)
        
        if(doorInfo)
        {
            sendEvent(name: "commStatus", value: "good")
            
            sendEvent(name: "rssi", value: (doorInfo[9].result.isEmpty() ? "unknown" : doorInfo[9].result[0][1].toInteger()))
            
            def child
            for(i = 1; i < 4; i++)
            {
                if(!doorInfo[3*i-2].result.isEmpty())
                {
                    logDebug("managing door: ${i}")
                    child = manageDoorDevice(i.toString())
                    def doorState = [:]
                    if(child)
                    {
                        doorState =
                            [
                            doorStatus: doorInfo[3*i-3].result[0][1],
                            doorBattery: doorInfo[3*(i-1)+10].result[0][1],
                            doorBLE: doorInfo[3*(i-1)+11].result[0][1],
                            doorTemp: doorInfo[3*(i-1)+12].result[0][1],
                            ]
                        // update child device
                        logDebug("updating door: ${i} on child: ${child} with state: ${doorState}")
                        child.refreshFromMaster(i.toString(), doorState)
                    }
                }
            }
        }
    }
    catch (Exception e)
    {
        logDebug("refreshDoorInfo() failed")
        sendEvent(name: "commStatus", value: "error")
        throw(e)
    }
}

def initialize()
{
    sendEvent(name: "commStatus", value: "unknown") 
    refresh()
}

def uninstalled()
{
}

def refresh()
{
    unschedule()
    
    try
    {
        refreshTokens()
        refreshDoorInfo()
    }
    catch (Exception e)
    {
        logDebug("refresh() failed")
    }
    
    // schedule next refresh
    runIn((60*refreshInterval.toFloat().toInteger()), refresh)
}

def refreshFromChild()
{
    unschedule()
    refreshDoorInfo()
    
    // schedule next refresh
    runIn((60*refreshInterval.toFloat().toInteger()), refresh)
}

def checkCommStatus()
{
    switch(device.currentValue("commStatus"))
    {
        case "good":
            logDebug("checkCommStatus() success")
            return true
        
        case "error":
        case "unknown":
        default:
            logDebug("checkCommStatus() failed")
            return false
    }
}

def setToken(token)
{
    state.token = token
}

def getToken()
{
    return state.token
}

def setUserId(id)
{
    state.userId = id
}

def getUserId()
{
    return state.userId
}

def setPortalId(id)
{
    state.portalId = id
}

def getPortalId()
{
    return state.portalId
}

def setDevices(devices)
{
    state.devices = devices
}

def getDevices()
{
    return state.devices
}

def setPortalKey(key)
{
    state.portalKey = key
}

def getPortalKey()
{
    return state.portalKey
}

def getUsername()
{
    return username
}

def getBaseURI()
{
    return "https://genie.exosite.com/api/portals/v1/"
}

def getBasePostURI()
{
    return "https://genie.m2.exosite.com/onep:v1/rpc/process"
}

def findDoorDevice(name)
{
    return getChildDevice(childDoorName(name))
}

def createDoorDevice(name)
{
    return addChildDevice("Aladdin Connect Garage Door", childDoorName(name), [label:"${childDoorName(name)}", isComponent:true, name:"${childDoorName(name)}"])
}

def manageDoorDevice(name)
{
    def child = findDoorDevice(name)
    if(child)
    {
        // use existing child if it exists...
        logDebug("found existing child: ${child}")
    }
    else
    {
        // create child if it didn't exist...
        child = createDoorDevice(name)
        logDebug("created new child: ${child}")
    }
    
    return child
}

def childDoorName(name)
{
    return "${device.getName()}-${name}"
}

def genParamsPre()
{
    def params =
        [
            uri: getBaseURI() + "users/_this/token",
            headers:
            [
                'AppVersion': '2.10.1',
                'BundleName': 'com.geniecompany.AladdinConnect',
                'User-Agent': 'Aladdin Connect Android v2.10.1',
                'BuildVersion': '131',
                'Authorization': "Basic " + ("${username}:${password}").bytes.encodeBase64().toString()
            ]
        ]
 
    return params
}

def genParamsToken(suffix)
{
    def params =
        [
            uri: getBaseURI() + suffix,
            headers:
            [
                'AppVersion': '2.10.1',
                'BundleName': 'com.geniecompany.AladdinConnect',
                'User-Agent': 'Aladdin Connect Android v2.10.1',
                'BuildVersion': '131',
                'Authorization': "Token: " + getToken()
            ]
        ]
 
    return params
}

def genParamsPost()
{
    def params =
        [
            uri: getBasePostURI(),
            headers:
            [
                'AppVersion': '2.10.1',
                'BundleName': 'com.geniecompany.AladdinConnect',
                'User-Agent': 'Aladdin Connect Android v2.10.1',
                'BuildVersion': '131',
                'Authorization': "Token: " + getToken(),
            ],
            contentType: 'application/json',
            requestContentType: 'application/json'
        ]
 
    return params
}

def genDoorInfoReq()
{
    // NOTE: do not change the order of these requests
    //   add more at the end if needed
    def req = """
    {
    "auth": {
        "cik": "${getPortalKey()}",
        "client_id": "${getDevices()[0]}"
    },
    "calls": [
        {
            "arguments": [
                {
                    "alias": "dps1.door_status"
                },
                {}
            ],
            "id": 1,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.name"
                },
                {}
            ],
            "id": 2,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.link_status"
                },
                {}
            ],
            "id": 3,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.door_status"
                },
                {}
            ],
            "id": 4,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.name"
                },
                {}
            ],
            "id": 5,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.link_status"
                },
                {}
            ],
            "id": 6,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.door_status"
                },
                {}
            ],
            "id": 7,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.name"
                },
                {}
            ],
            "id": 8,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.link_status"
                },
                {}
            ],
            "id": 9,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dcm.wifi_rssi"
                },
                {}
            ],
            "id": 10,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.battery_level"
                },
                {}
            ],
            "id": 11,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.ble_strength"
                },
                {}
            ],
            "id": 12,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps1.temperature"
                },
                {}
            ],
            "id": 13,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.battery_level"
                },
                {}
            ],
            "id": 14,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.ble_strength"
                },
                {}
            ],
            "id": 15,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps2.temperature"
                },
                {}
            ],
            "id": 16,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.battery_level"
                },
                {}
            ],
            "id": 17,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.ble_strength"
                },
                {}
            ],
            "id": 18,
            "procedure": "read"
        },
        {
            "arguments": [
                {
                    "alias": "dps3.temperature"
                },
                {}
            ],
            "id": 19,
            "procedure": "read"
        }
    ]
    }
    """
    
    return req    
}

def httpGetExec(params, throwToCaller = false)
{
    logDebug("httpGetExec(${params})")
    
    try
    {
        def result
        httpGet(params)
        { resp ->
            if (resp.data)
            {
                logDebug("resp.data = ${resp.data}")
                result = resp.data
            }
        }
        return result
    }
    catch (Exception e)
    {
        logDebug("httpGetExec() failed: ${e.message}")
        if(throwToCaller)
        {
            throw(e)
        }
    }

}

def httpPostExec(params, throwToCaller = false)
{
    logDebug("httpPostExec(${params})")
    
    try
    {
        def result
        httpPost(params)
        { resp ->
            if (resp.data)
            {
                logDebug("resp.data = ${resp.data}")
                result = resp.data
            }
        }
        return result
    }
    catch (Exception e)
    {
        logDebug("httpPostExec() failed: ${e.message}")
        if(throwToCaller)
        {
            throw(e)
        }
    }
}
